{
  "Base.js": [
    "Base.update && Base.collider",
    "",
    "  Base implement update and",
    "    collider as two array",
    "    processed by the engine",
    "  update comes with a standard",
    "    collider update loop",
    "   _______________________________",
    "Base.sprite refer to PIXI.Sprite",
    "   _______________________________",
    "Base.moveTo && Base.moveBy",
    "",
    "  moveTo is an absolute move in",
    "    orthognal space",
    "  moveBy is an relative move in",
    "    orthognal space. It take",
    "    Micro.dt into account",
    "   _______________________________",
    "Base.addTo",
    "",
    "  addTo is a layer management",
    "    commodity",
    "   _______________________________",
    "Base.scale",
    "",
    "  scale is a JS traditional",
    "    setter, must be feed with",
    "    PIXI.scale object",
    "   _______________________________"
  ],
  "Collider.js": [
    "A Collider constructor only support",
    "    math shapes :",
    "",
    "    Point : {x, y}",
    "    Circle : {x, y, radius}",
    "    Rectangle : {x, y, width, height}",
    "   ___________________________________",
    "Collider.update",
    "",
    "    update is a standard way to",
    "    maintain a collider moving",
    "   ___________________________________",
    "Collider.collidesWith",
    "",
    "    collidesWith is used for by a",
    "    Collider to detect collision with",
    "    another Collider.shape",
    "   ___________________________________",
    "Collider.collideFunction",
    "",
    "  collideFunction is a container",
    "    for run-time reactions",
    "   _______________________________",
    "Collider.draw",
    "",
    "    draw is used to render a",
    "    geometrical shape on a layer",
    "    mostly for debug purpose",
    "   ___________________________________"
  ],
  "Entity.js": [
    "An Entity is build upon Base",
    "   _______________________________",
    "Entity.sprite.anchor",
    "",
    "  Unlike Base's anchor,",
    "    Entity.anchor is centered",
    "   ________________________________",
    "Entity.update",
    "",
    "  Since Base's update is an array",
    "    one should push an",
    "    Entity's update in order to",
    "    get it processed",
    "   ________________________________",
    "Entity.collider",
    "",
    "  Since Base's collider is an array",
    "    one should push an",
    "    Entity's collider in order to",
    "    get it processed",
    "   _________________________________",
    "Entity.jumpDelay && Entity.jumpBool",
    "",
    "  Entity.jumpDelay is meant to be",
    "    decremented over time.",
    "  Entity.jumpBool is the trigger",
    "    allowing jump for an Entity",
    "   ________________________________",
    "Entity.velocity",
    "",
    "  The velocity describes to force",
    "    applied to an Entity every",
    "    call to update",
    "  addVelocity is supplied for",
    "    each Entity",
    "   ________________________________",
    "An Entity is added to",
    "  Micro.entityList upon creation",
    "   _______________________________"
  ],
  "Layer.js": [
    "Entity.Layer",
    "",
    "  For now, the Layer namespace",
    "    is organized in 4 PIXI.Container",
    "    in order :",
    "      Layer.list.background",
    "      Layer.list.foreground",
    "      Layer.list.ui",
    "      Layer.list.debug",
    "   __________________________________"
  ],
  "Player.js": [
    "A Player is build upon Entity",
    "   _______________________________",
    "Player.update",
    "",
    "  Since Base's update is an array",
    "    one should push an",
    "    Player's update in order to",
    "    get it processed",
    "   ________________________________"
  ]
}